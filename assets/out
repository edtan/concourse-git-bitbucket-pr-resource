#!/usr/bin/env bash
# vim: set ft=sh

set -e -o pipefail

exec 3>&1
exec 1>&2

cd "${1}"

payload=$(mktemp /tmp/resource.XXXXXX)
cat > "${payload}" <&0

# source
bitbucket_type=`jq -r '.source.bitbucket_type // "server"' < ${payload}`
base_url=`jq -r '.source.base_url // ""' < ${payload}`
username=`jq -r '.source.username // ""' < ${payload}`
password=`jq -r '.source.password // ""' < ${payload}`
client_id=`jq -r '.source.client_id // ""' < ${payload}`
client_secret=`jq -r '.source.client_secret // ""' < ${payload}`
project=`jq -r '.source.project // ""' < ${payload}`
repository=`jq -r '.source.repository // ""' < ${payload}`
dir=`jq -r '.source.dir // ""' < ${payload}`
if [[ ! ${dir} ]]; then
    dir=$repository
fi
# params
build=`jq '.params' < ${payload}`
#rm $payload

if [[ ! ${base_url} ]]; then
    echo "error: source.base_url can't be empty"
    exit 1
fi

cd ${dir}

pr=`cat pull-request-info`
commit=`echo ${pr} | jq -r '.commit'`
build_url="${ATC_EXTERNAL_URL}/builds/${BUILD_ID}"
if [[ "$bitbucket_type" == "server" ]]; then
    url="${base_url}/rest/build-status/1.0/commits/${commit}"

    json=`echo "${build}" | jq --arg build_url "${build_url}" --arg id "${BUILD_ID}" '{
        state: .state,
        key: .key,
        name: (.key + "-" + $id),
        url: $build_url,
        description: .description|tostring
    }'`    
elif [[ "$bitbucket_type" == "cloud" ]]; then
    uri="${base_url}/site/oauth2/access_token"
    access_token=$(curl -X POST -sS --fail -u "${client_id}:${client_secret}" "$uri" -d grant_type=client_credentials | jq -r '.access_token')

    url="${base_url}/api/2.0/repositories/${project}/${repository}/commit/${commit}/statuses/build"

    # expand variables like $BUILD_ID before passing into JSON
    name=$(echo "$build"| jq -r '.name')
    name=$(eval echo $name)
    desc=$(echo "$build"| jq -r '.description')
    desc=$(eval echo $desc)
    build_url=$(echo "$build"| jq -r '.url')
    build_url=$(eval echo $build_url)
    json=`echo "${build}" | jq --arg build_url "${build_url}" --arg id "${BUILD_ID}" --arg name "$name" --arg desc "$desc" '{
        state: .state,
        key: ($name + "-" + $id),
        name: $name,
        url: $build_url,
        description: $desc
    }'` 
fi

curl -s --fail -H "Authorization: Bearer ${access_token}" -H "Content-Type: application/json" -XPOST ${url} -d "${json}"

comment_file=$(echo "$build"| jq -r '.comment_file')
comment_file=$(eval echo ../$comment_file) # need to go up a directory to get back in the main dir
if [ -f ${comment_file} ]; then
  comment="$(cat $comment_file)"
  pr_id=$(jq -n --argjson pr "${pr}" -r '$pr.id')
  # add comment to pull request.
  curl -X POST -sS --fail -v -H "Authorization: Bearer ${access_token}" \
    "https://api.bitbucket.org/1.0/repositories/${project}/${repository}/pullrequests/${pr_id}/comments" \
    -d "content=$comment"
fi

jq -n --argjson pr "${pr}" '{
    version: {
        id: $pr.id|tostring,
        branch: $pr.feature_branch,
        commit: $pr.commit
    }
}' >&3
